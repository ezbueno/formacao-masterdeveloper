{"version":3,"sources":["Components/NavBarItem.js","constants.js","api/AuthService.js","Components/NavBar.js","api/TaskService.js","Components/Alert.js","Components/Spinner.js","Components/TaskListTable.js","Components/TaskForm.js","Components/Login.js","App.js","index.js"],"names":["NavBarItem","className","this","props","item","active","to","href","onClick","e","name","Component","SERVER","process","AUTH_ENDPOINT","API_ENDPOINT","username","password","onLogin","console","log","axios","post","then","response","jwtToken","headers","replace","sessionStorage","setItem","catch","error","getItem","getJWTToken","removeItem","jwtTokenData","atob","split","JSON","parse","NavBar","state","items","onClickHandler","bind","onLogoutHandler","itemClicked","forEach","setState","AuthService","logout","onLinkClick","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","map","i","key","isAuthenticated","getJWTTokenData","displayName","onFetch","onError","get","buildAuthHeader","data","content","onLoad","onDelete","delete","task","onSave","put","Alert","role","message","Spinner","TaskListTable","tasks","editId","loading","alert","onDeleteHandler","onStatusChangeHandler","onEditHandler","listTasks","TaskService","list","setErrorState","window","confirm","toast","success","position","POSITION","BOTTOM_LEFT","done","save","t","length","onEdit","onStatusChange","autoClose","TableHeader","scope","TableBody","checked","onChange","description","format","whenToDo","value","EmptyTableBody","colSpan","align","TaskForm","redirect","buttonName","saving","onSubmitHandler","onInputChangeHandler","match","params","load","status","event","preventDefault","field","target","prevState","onSubmit","htmlFor","placeholder","disabled","aria-hidden","Login","processing","loggedIn","handleSubmit","handleInputChanged","login","onLoginSuccess","App","onRefreshHandler","forceUpdate","style","marginTop","exact","path","render","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c707312f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavBarItem extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Link \r\n                    className={`nav-item nav-link ${this.props.item.active ? \"active\" : \"\"}`}\r\n                    to={this.props.item.href} \r\n                    onClick={e => this.props.onClick(this.props.item)}>\r\n                        {this.props.item.name}\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBarItem;","const SERVER = process.env.REACT_APP_SERVER;\r\n\r\nexport const APP_NAME = \"BlueTasks\";\r\nexport const AUTH_ENDPOINT = `${SERVER}`\r\nexport const API_ENDPOINT = `${SERVER}/api`\r\nexport const JWT_TOKEN_NAME = \"jwt\";","import axios from \"axios\";\r\nimport {AUTH_ENDPOINT, JWT_TOKEN_NAME} from \"../constants\"\r\n\r\nclass AuthService {\r\n    login(username, password, onLogin) {\r\n        console.log(AUTH_ENDPOINT);\r\n        axios\r\n            .post(`${AUTH_ENDPOINT}/login`, {username: username, password: password})\r\n            .then(response => {\r\n                const jwtToken = response.headers['authorization'].replace(\"Bearer \", \"\");\r\n                sessionStorage.setItem(JWT_TOKEN_NAME, jwtToken);\r\n                onLogin(true);\r\n            }).catch(error => {\r\n                console.error(error);\r\n                onLogin(false);\r\n            });\r\n    }\r\n\r\n    getJWTToken() {\r\n        return sessionStorage.getItem(JWT_TOKEN_NAME);\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return this.getJWTToken() != null;\r\n    }\r\n\r\n    logout() {\r\n       sessionStorage.removeItem(JWT_TOKEN_NAME);\r\n    }\r\n\r\n    getJWTTokenData() {\r\n        const jwtToken = this.getJWTToken();\r\n        \r\n        if (jwtToken == null)  {\r\n            return null;\r\n        }\r\n        const jwtTokenData = atob(jwtToken.split(\".\")[1]);\r\n        return JSON.parse(jwtTokenData);\r\n    }\r\n}\r\n\r\nexport default new AuthService();","import React, { Component } from 'react';\r\nimport NavBarItem from './NavBarItem';\r\nimport { APP_NAME } from '../constants';\r\nimport AuthService from '../api/AuthService';\r\n\r\nclass NavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: [\r\n                {name: \"Listar Tarefas\", href: \"/\", active: true},\r\n                {name: \"Nova Tarefa\", href: \"/form\", active: false}\r\n            ]\r\n        }\r\n\r\n        this.onClickHandler = this.onClickHandler.bind(this);\r\n        this.onLogoutHandler = this.onLogoutHandler.bind(this);\r\n    }\r\n\r\n    onClickHandler(itemClicked) {\r\n        const items = [...this.state.items]\r\n\r\n        items.forEach(item => {\r\n            if (item.name === itemClicked.name) {\r\n                item.active = true;\r\n            } else {\r\n                item.active = false;\r\n            }\r\n        })\r\n\r\n        this.setState({items});\r\n    }\r\n\r\n    onLogoutHandler() {\r\n        AuthService.logout();\r\n        this.props.onLinkClick();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <span className=\"navbar-brand mb-0 h1\">{APP_NAME}</span>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n                        <div className=\"navbar-nav mr-auto\">\r\n                            {this.state.items.map(\r\n                                i => <NavBarItem\r\n                                    key={i.name}\r\n                                    item={i}\r\n                                    onClick={this.onClickHandler} />)\r\n                            }\r\n                            {AuthService.isAuthenticated() ? \r\n                                <NavBarItem \r\n                                    item={{name: \"Logout\", active: false, href: \"#\"}}\r\n                                    onClick={this.onLogoutHandler}/>\r\n                                : \"\"\r\n                            }\r\n                        </div>\r\n                        <span className=\"navbar-text\">\r\n                            {AuthService.isAuthenticated() ?\r\n                                `Olá, ${AuthService.getJWTTokenData().displayName}!` : \"\"\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import AuthService from \"./AuthService\";\r\nimport axios from \"axios\";\r\nimport { API_ENDPOINT } from \"../constants\";\r\n\r\nclass TaskService {\r\n\r\n    list(onFetch, onError) {\r\n        axios.get(`${API_ENDPOINT}/tasks?sort=whenToDo,asc`, this.buildAuthHeader())\r\n            .then(response => onFetch(response.data.content))\r\n            .catch(e => onError(e));\r\n    }\r\n\r\n    load(id, onLoad, onError) {\r\n        axios.get(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader())\r\n            .then(response => onLoad(response.data))\r\n            .catch(e => onError(e));\r\n    }\r\n\r\n    delete(id, onDelete, onError) {\r\n        axios.delete(`${API_ENDPOINT}/tasks/${id}`, this.buildAuthHeader())\r\n            .then(() => onDelete())\r\n            .catch(e => onError(e));\r\n    }\r\n\r\n    save(task, onSave, onError) {\r\n        if (task.id === 0) {\r\n           axios.post(`${API_ENDPOINT}/tasks`, task, this.buildAuthHeader())\r\n                .then(() => onSave())\r\n                .catch(e => onError(e));\r\n        } else {\r\n            axios.put(`${API_ENDPOINT}/tasks/${task.id}`, task, this.buildAuthHeader()) \r\n                .then(() => onSave())\r\n                .catch(e => onError(e));\r\n        }\r\n    }\r\n\r\n    buildAuthHeader() {\r\n        return {\r\n            headers: {\r\n                'Authorization': `Bearer ${AuthService.getJWTToken()}`\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default new TaskService();","import React from 'react'\r\n\r\nconst Alert = (props) =>\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n        {props.message}\r\n    </div>\r\n\r\nexport default Alert;","import React from 'react';\r\n\r\nconst Spinner = () =>\r\n    <div className=\"d-flex justify-content-center\">\r\n        <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Carregando...</span>\r\n        </div>\r\n    </div>\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport TaskService from '../api/TaskService';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport Alert from './Alert';\r\nimport AuthService from '../api/AuthService';\r\nimport Spinner from './Spinner';\r\nimport Moment from 'react-moment';\r\n\r\nclass TaskListTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            tasks: [],\r\n            editId: 0,\r\n            loading: false,\r\n            alert: null\r\n        }\r\n\r\n        this.onDeleteHandler = this.onDeleteHandler.bind(this);\r\n        this.onStatusChangeHandler = this.onStatusChangeHandler.bind(this);\r\n        this.onEditHandler = this.onEditHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.listTasks();\r\n    }\r\n\r\n    listTasks() {\r\n        if (!AuthService.isAuthenticated()) {\r\n            return;\r\n        }\r\n\r\n        this.setState({loading: true});\r\n        TaskService.list(\r\n            tasks => this.setState({tasks: tasks, loading: false}),\r\n            error => this.setErrorState(error)\r\n        );\r\n    }\r\n\r\n    setErrorState(error) {\r\n       this.setState({alert: `Erro na requisição: ${error.message}`, loading: false}) \r\n    }\r\n\r\n    onDeleteHandler(id) {\r\n        if (window.confirm(\"Deseja mesmo excluir esta tarefa?\")) {\r\n            TaskService.delete(id, \r\n                () => {\r\n                    this.listTasks();\r\n                    toast.success(\"Tarefa excluída!\", {position: toast.POSITION.BOTTOM_LEFT})\r\n                },\r\n                error => this.setErrorState(error));\r\n        }\r\n    }\r\n\r\n    onEditHandler(id) {\r\n        this.setState({editId: id});\r\n    }\r\n\r\n    onStatusChangeHandler(task) {\r\n       task.done = !task.done;\r\n\r\n       TaskService.save(task,\r\n            () => {\r\n                const tasks = this.state.tasks.map(t => t.id !== task.id ? t : task);\r\n                this.setState({tasks : tasks});\r\n            },\r\n            error => this.setErrorState(error)\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (!AuthService.isAuthenticated()) {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n\r\n        if (this.state.editId > 0) {\r\n            return <Redirect to={`/form/${this.state.editId}`}/>\r\n        }\r\n\r\n        return (\r\n            <>  \r\n                <h1>Lista de Tarefas</h1>\r\n                {this.state.alert != null ? <Alert message={this.state.alert}/> : \"\" }\r\n                {this.state.loading ? <Spinner/> :\r\n                    <table className=\"table table-striped\">\r\n                        <TableHeader/>\r\n                        {this.state.tasks.length > 0 ? \r\n                            <TableBody \r\n                                tasks={this.state.tasks} \r\n                                onDelete={this.onDeleteHandler}\r\n                                onEdit={this.onEditHandler}\r\n                                onStatusChange={this.onStatusChangeHandler}/>\r\n                            :\r\n                            <EmptyTableBody/>\r\n                        }\r\n                    </table>\r\n                }\r\n                <ToastContainer autoClose={1500}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead className=\"thead-dark\">\r\n            <tr>\r\n                <th scope=\"col\">Status</th>\r\n                <th scope=\"col\">Descrição</th>\r\n                <th scope=\"col\">Data</th>\r\n                <th scope=\"col\">Ações</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nconst TableBody = (props) => {\r\n    return (\r\n        <tbody>\r\n            {props.tasks.map(task =>\r\n                <tr key={task.id}>\r\n                    <td><input type=\"checkbox\" \r\n                               checked={task.done}\r\n                               onChange={() => props.onStatusChange(task)}/>\r\n                    </td>\r\n                    <td>{task.done ? <s>{task.description}</s> : task.description}</td>\r\n                    <td>{task.done ? <s><Moment format=\"DD/MM/YYYY\">{task.whenToDo}</Moment>\r\n                                    </s> : <Moment format=\"DD/MM/YYYY\">{task.whenToDo}</Moment>\r\n                        }\r\n                    </td>\r\n                    <td>\r\n                        <input \r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\" \r\n                            value=\"Editar\"\r\n                            onClick={() => props.onEdit(task.id)}/>\r\n                        &nbsp;\r\n                        <input\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger\"\r\n                            value=\"Excluir\"\r\n                            onClick={() => props.onDelete(task.id)}/>\r\n                    </td>\r\n                </tr>\r\n            )}\r\n        </tbody>\r\n    );\r\n}\r\n\r\nconst EmptyTableBody = (props) => {\r\n    return (\r\n        <tbody>\r\n            <tr><td colSpan=\"4\" align=\"center\">Sem tarefas cadastradas no momento!</td></tr>\r\n        </tbody>\r\n    );  \r\n}\r\n\r\nexport default TaskListTable;","import React, { Component } from 'react';\r\nimport TaskService from '../api/TaskService';\r\nimport { Redirect } from 'react-router-dom';\r\nimport AuthService from '../api/AuthService';\r\nimport Spinner from './Spinner';\r\nimport Alert from './Alert';\r\n\r\nclass TaskForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            task: {\r\n                id: 0,\r\n                description: \"\",\r\n                whenToDo: \"\"\r\n            },\r\n            redirect: false,\r\n            buttonName: \"Cadastrar\",\r\n            alert: null,\r\n            loading: false,\r\n            saving: false\r\n        }\r\n\r\n        this.onSubmitHandler = this.onSubmitHandler.bind(this);\r\n        this.onInputChangeHandler = this.onInputChangeHandler.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const editId = this.props.match.params.id;\r\n        \r\n        if (editId) {\r\n            this.setState({loading: true})\r\n            TaskService.load(~~editId,\r\n                task => this.setState({task : task, loading: false, buttonName: \"Alterar\"}),\r\n                error => {\r\n                    if (error.response) {\r\n                        if (error.response.status === 404) {\r\n                            this.setErrorState(\"Tarefa não encontrada!\")\r\n                        } else {\r\n                            this.setErrorState(`Erro ao carregar dados: ${error.response}`);\r\n                        }\r\n                    } else {\r\n                        this.setErrorState(`Erro na requisição: ${error.message}`);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    setErrorState(error) {\r\n        this.setState({alert: error, loading: false, saving: false});\r\n     }\r\n    \r\n    onSubmitHandler(event) {\r\n        event.preventDefault();\r\n        this.setState({saving: true, alert: null})\r\n        TaskService.save(this.state.task,\r\n            () => this.setState({redirect: true, saving: false}),\r\n            error => {\r\n                if (error.response) {\r\n                    this.setErrorState(`Erro: ${error.response.data.error}`);\r\n                } else {\r\n                    this.setErrorState(`Erro na requisição: ${error.message}`);\r\n                }\r\n            });\r\n    }\r\n\r\n    onInputChangeHandler(event) {\r\n        const field = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState(prevState => ({task: {...prevState.task, [field]: value}}));\r\n    }\r\n\r\n    render() {\r\n        if (!AuthService.isAuthenticated()) {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n\r\n        if (this.state.redirect) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        if (this.state.loading) {\r\n            return <Spinner/>\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Cadastro de Tarefa</h1>\r\n                {this.state.alert != null ? <Alert message={this.state.alert}/> : \"\"}\r\n                <form onSubmit={this.onSubmitHandler}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"description\">Descrição</label>\r\n                        <input type=\"text\"\r\n                            className=\"form-control\"\r\n                            name=\"description\"\r\n                            value={this.state.task.description}\r\n                            placeholder=\"Digite a descrição\"\r\n                            onChange={this.onInputChangeHandler}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"whenToDo\">Data</label>\r\n                        <input type=\"date\"\r\n                            className=\"form-control\"\r\n                            name=\"whenToDo\"\r\n                            value={this.state.task.whenToDo}\r\n                            placeholder=\"Informe a data\"\r\n                            onChange={this.onInputChangeHandler}/>\r\n                    </div>\r\n                    <button \r\n                        type=\"submit\" \r\n                        className=\"btn btn-primary\"\r\n                            disabled={this.state.saving}>\r\n                                {\r\n                                    this.state.saving ? \r\n                                        <span className=\"spinner-border spinner-border-sm\"\r\n                                            role=\"status\" aria-hidden=\"true\">\r\n                                        </span>\r\n                                    : this.state.buttonName\r\n                                } \r\n                    </button>\r\n                    &nbsp;&nbsp;\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn btn-primary\"\r\n                        onClick={() => this.setState({redirect: true})}>Cancelar\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;","import React, { Component } from 'react';\r\nimport AuthService from '../api/AuthService';\r\nimport Alert from './Alert';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\nconstructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n        username: \"\",\r\n        password: \"\",\r\n        alert: null,\r\n        processing: false,\r\n        loggedIn: false\r\n    }\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleInputChanged = this.handleInputChanged.bind(this);\r\n}\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.setState({processing: true});\r\n        AuthService.login(this.state.username, this.state.password, \r\n            success => {\r\n                if (success) {\r\n                    this.setState({loggedIn: true, processing: false});\r\n                    this.props.onLoginSuccess();\r\n                } else {\r\n                    this.setState({alert: \"O login não pode ser realizado!\", processing: false});\r\n                }\r\n            });\r\n    }\r\n\r\n    handleInputChanged(event) {\r\n        const field = event.target.name;\r\n        const value = event.target.value;\r\n        this.setState({[field]: value});\r\n    }\r\n\r\n    render() {\r\n        if (AuthService.isAuthenticated() || this.state.loggedIn) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1>Login</h1>\r\n                {this.state.alert != null ? <Alert message={this.state.alert}/> : \"\"}\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"username\">Usuário</label>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\"\r\n                            onChange={this.handleInputChanged}\r\n                            value={this.state.username}\r\n                            name=\"username\"\r\n                            placeholder=\"Digite o usuário\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"password\">Senha</label>\r\n                        <input \r\n                            type=\"password\" \r\n                            className=\"form-control\"\r\n                            onChange={this.handleInputChanged}\r\n                            value={this.state.password}\r\n                            name=\"password\"\r\n                            placeholder=\"Digite a senha\"/>\r\n                    </div>\r\n                    <button \r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary\"\r\n                        disabled={this.state.processing}>Login\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\nimport NavBar from './Components/NavBar';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport TaskListTable from './Components/TaskListTable';\nimport TaskForm from './Components/TaskForm';\nimport Login from './Components/Login';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onRefreshHandler = this.onRefreshHandler.bind(this);\n  }\n\n  onRefreshHandler() {\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <NavBar onLinkClick={this.onRefreshHandler}/>\n            <div className=\"container\" style={{marginTop: 20}}>\n              <Switch>\n                <Route exact path=\"/login\" render={() => <Login onLoginSuccess={this.onRefreshHandler}/>}/>\n                <Route exact path=\"/form\" component={TaskForm}/>\n                <Route exact path=\"/form/:id\" component={TaskForm}/>\n                <Route path=\"/\" component={TaskListTable}/>\n              </Switch>\n            </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}